name: CI/CD Pipeline for Resume App

on:
  push:
    branches:
      - main  # or whichever branch you want to trigger the action

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out the repository
      uses: actions/checkout@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build the Docker image
      run: |
        docker build -t resume-app .
    
    - name: Tag the Docker image for ECR
      run: |
        docker tag resume-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/resume-app:latest

    - name: Push the Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/resume-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Update ECS service to use the new Docker image
      run: |
        ecs_service_name="resume-app-service"
        cluster_name="resume-app-cluster"
        container_name="resume-app"
        image_uri="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/resume-app:latest"
        task_definition=$(aws ecs describe-task-definition --task-definition $ecs_service_name)
        family_name=$(echo $task_definition | jq -r .taskDefinition.family)
        revision=$(echo $task_definition | jq -r .taskDefinition.revision)
        new_task_definition=$(aws ecs register-task-definition --family $family_name --container-definitions "$(echo $task_definition | jq '.taskDefinition.containerDefinitions' | jq ".[0].image=\"$image_uri\"")")
        new_revision=$(echo $new_task_definition | jq -r .taskDefinition.revision)

        # Update the ECS service
        aws ecs update-service --cluster $cluster_name --service $ecs_service_name --task-definition $family_name:$new_revision
